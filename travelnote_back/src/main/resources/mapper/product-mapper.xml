<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="kr.co.iei.product.model.dao.ProductDao">
  
  <select id="totalCount">
  	select count(*) from product where product_status=1
  </select>
  
  <select id="searchProduct" resultType="product">
    SELECT * FROM (
        SELECT rownum AS rnum, p.* FROM (
            SELECT
                product_no,
                product_name,
                product_sub_name,
                product_thumb,
                product_price,
                product_info,
                product_latitude,
                product_longitude,
                product_writer,
                product_status,
                TO_CHAR(enroll_date, 'yyyy-mm-dd') AS enroll_date
            FROM product
            WHERE product_status = 1
              AND (product_name LIKE '%' || #{searchQuery} || '%' 
                OR product_sub_name LIKE '%' || #{searchQuery} || '%' 
                OR product_info LIKE '%' || #{searchQuery} || '%')
            ORDER BY enroll_date DESC
        ) p
    )
    WHERE rnum BETWEEN #{start} AND #{end}
  </select>
  
  <select id="selectProductList" resultType="product">
    SELECT * FROM (
        SELECT rownum AS rnum, p.* FROM (
            SELECT
                product_no,
                product_name,
                product_sub_name,
                product_thumb,
                product_price,
                product_info,
                product_latitude,
                product_longitude,
                product_writer,
                product_status,
                TO_CHAR(enroll_date, 'yyyy-mm-dd') AS enroll_date
            FROM product
            WHERE product_status = 1
            ORDER BY enroll_date DESC  <!-- 최신 등록일 기준으로 정렬 -->
        ) p
    )
    WHERE rnum BETWEEN #{start} AND #{end}  <!-- 페이징 처리 -->
  </select>

  <select id="selectProductListEmail" resultType="product">
    SELECT p.*, 
           COALESCE(w.product_like, 0) AS productLike,         -- 좋아요 여부 (0 또는 1)
           COALESCE(likeCount.total_like_count, 0) AS productLikeCount  -- 좋아요 수
    FROM (
        SELECT rownum AS rnum, 
               p.*
        FROM (
            SELECT 
                product_no,
                product_name,
                product_sub_name,
                product_thumb,
                product_price,
                product_info,
                product_latitude,
                product_longitude,
                product_writer,
                product_status,
                TO_CHAR(enroll_date, 'yyyy-mm-dd') AS enroll_date
            FROM product 
            WHERE product_status = 1
            ORDER BY product_no DESC
        ) p
    ) p
    LEFT JOIN (
        SELECT product_no, user_no, 1 AS product_like 
        FROM wish 
        WHERE user_no = (SELECT user_no FROM user_tbl WHERE user_email = #{userEmail})
    ) w ON p.product_no = w.product_no
    LEFT JOIN (
        SELECT product_no, COUNT(*) AS total_like_count 
        FROM wish 
        GROUP BY product_no
    ) likeCount ON p.product_no = likeCount.product_no
    WHERE rnum BETWEEN #{pi.start} AND #{pi.end}
    <!-- userEmail이 null이 아닐 때만 이 조건을 추가 -->
    <!-- 
    <if test="userEmail != null">
        AND w.product_no IS NOT NULL  
    </if> -->
  </select>
  
  <!-- 상품 정렬(이메일 있을 때 - 좋아요순) -->
  <select id="selectProductListMostLiked" resultType="product">
    SELECT p.*, 
           COALESCE(w.product_like, 0) AS productLike,         <!-- 좋아요 여부 (0 또는 1) -->
           COALESCE(likeCount.total_like_count, 0) AS productLikeCount  <!-- 좋아요 수 -->
    FROM (
        SELECT rownum AS rnum, 
               p.*
        FROM (
            SELECT 
                product_no,
                product_name,
                product_sub_name,
                product_thumb,
                product_price,
                product_info,
                product_latitude,
                product_longitude,
                product_writer,
                product_status,
                TO_CHAR(enroll_date, 'yyyy-mm-dd') AS enroll_date
            FROM product 
            WHERE product_status = 1
            ORDER BY product_no DESC
        ) p
    ) p
    LEFT JOIN (
        SELECT product_no, user_no, 1 AS product_like 
        FROM wish 
        WHERE user_no = (SELECT user_no FROM user_tbl WHERE user_email = #{userEmail})
    ) w ON p.product_no = w.product_no
    LEFT JOIN (
        SELECT product_no, COUNT(*) AS total_like_count 
        FROM wish 
        GROUP BY product_no
    ) likeCount ON p.product_no = likeCount.product_no
    WHERE rnum BETWEEN #{pi.start} AND #{pi.end}
    ORDER BY productLikeCount DESC
  </select>
  
  <!-- 상품 정렬(이메일 있을 때 - 최신순) -->
  <select id="selectProductListNewest" resultType="product">
    SELECT p.*, 
           COALESCE(w.product_like, 0) AS productLike,
           COALESCE(likeCount.total_like_count, 0) AS productLikeCount
    FROM (
        SELECT rownum AS rnum, 
               p.*
        FROM (
            SELECT 
                product_no,
                product_name,
                product_sub_name,
                product_thumb,
                product_price,
                product_info,
                product_latitude,
                product_longitude,
                product_writer,
                product_status,
                TO_CHAR(enroll_date, 'yyyy-mm-dd') AS enroll_date
            FROM product 
            WHERE product_status = 1 
            ORDER BY enroll_date DESC  <!-- 최신 등록일 기준으로 정렬 -->
        ) p
    ) p
    LEFT JOIN (
        SELECT product_no, user_no, 1 AS product_like 
        FROM wish 
        WHERE user_no = (SELECT user_no FROM user_tbl WHERE user_email = #{userEmail})
    ) w ON p.product_no = w.product_no
    LEFT JOIN (
        SELECT product_no, COUNT(*) AS total_like_count 
        FROM wish 
        GROUP BY product_no
    ) likeCount ON p.product_no = likeCount.product_no
    WHERE rnum BETWEEN #{pi.start} AND #{pi.end}
  </select>
  
  <insert id="insertProduct">
  	insert into product values(product_seq.nextval, #{productName}, #{productSubName}, #{productThumb}, #{productPrice}, #{productInfo}, #{productLatitude}, #{productLongitude}, #{productWriter}, #{productStatus}, sysdate)
  	<selectKey resultType="int" keyProperty="productNo" order="AFTER">
  		select max(product_no) from product
  	</selectKey>
  </insert>
  
  <insert id="insertProductFile">
  	insert into product_file values(product_file_seq.nextval, #{productNo}, #{filename}, #{filepath})
  </insert>
  
  <!-- 상품 기본 정보 조회 -->
  <select id="selectOneProduct" resultMap="getProduct">
    SELECT 
        product_no,
        product_name,
        product_sub_name,
        product_thumb,
        product_price,
        product_info,
        product_latitude,
        product_longitude,
        product_writer,
        product_status,
        TO_CHAR(enroll_date, 'yyyy-mm-dd') AS enroll_date
    FROM product 
    WHERE product_no = #{productNo}
  </select>

  <!-- 상품 파일 리스트 조회 -->
  <select id="selectOneProductFileList" resultType="productFile">
    SELECT * 
    FROM product_file 
    WHERE product_no = #{productNo}
  </select>

  <!-- 사용자 번호 조회 -->
  <select id="selectOneUser" resultType="int">
    SELECT user_no 
    FROM user_tbl 
    WHERE user_email = #{userEmail}
  </select>

  <!-- 리뷰 리스트 조회 -->
  <select id="selectOneProductReviews" resultType="review">
    SELECT r.*,
           (SELECT COUNT(*) FROM REVIEW_LIKE WHERE REVIEW_NO = r.REVIEW_NO) AS REVIEW_LIKE_COUNT,
           (SELECT COUNT(*) FROM REVIEW_LIKE WHERE REVIEW_NO = r.REVIEW_NO AND USER_NO = #{userNo}) AS REVIEW_LIKE
    FROM REVIEW r
    WHERE PRODUCT_NO = #{productNo} 
      AND REVIEW_COMMENT_REF IS NULL
    ORDER BY r.REVIEW_DATE DESC
  </select>
  
  <resultMap type="product" id="getProduct">
  	<result column="product_no" property="productNo" />
  	<result column="product_name" property="productName" />
  	<result column="product_sub_name" property="productSubName" />
  	<result column="product_thumb" property="productThumb" />
  	<result column="product_price" property="productPrice" />
  	<result column="product_info" property="productInfo" />
  	<result column="product_latitude" property="productLatitude" />
  	<result column="product_longitude" property="productLongitude" />
  	<result column="product_writer" property="productWriter" />
  	<result column="enroll_date" property="enrollDate" />
  	<collection property="productFileList" 
  				select="selectOneProductFileList"
  				column="product_no"
  				javaType="java.util.List"
  				ofType="productFile"
  	 />
  	 <collection property="productReviewList"
  	 			 select="selectOneProductReviews"
  	 			 column="product_no"
  	 			 javaType="java.util.List"
  	 			 ofType="productReview"
  	 />
  </resultMap>
  
  <select id="getProductFile" resultType="productFile">
  	select * from product_file where product_file_no=#{productFileNo}
  </select>
  
  <delete id="deleteProduct">
  	delete from product where product_no=#{productNo}
  </delete>
  
  <update id="updateProduct">
  	update product
  	set
  		product_name=#{productName},
  		product_sub_name=#{productSubName},
  		product_thumb=#{productThumb},
  		product_price=#{productPrice},
  		product_info=#{productInfo},
  		product_latitude=#{productLatitude},
  		product_longitude=#{productLongitude},
  		product_status=#{productStatus}
  	where product_no=#{productNo}
  </update>
  
  <select id="selectProductFile" resultType="productFile">
  	select * from product_file
  	where product_file_no in
  	<foreach collection="array" item="productFileNo" open="(" close=")" separator=",">
  		#{productFileNo}
  	</foreach>
  </select>
  
  <delete id="deleteProductFile">
  	delete from product_file
  	where product_file_no in
  	<foreach collection="array" item="productFileNo" open="(" close=")" separator=",">
  		#{productFileNo}
  	</foreach>
  </delete>
  
  <!-- 리뷰 리스트 (좋아요 순 정렬) -->
  <select id="selectReviewListMostLiked" resultType="review">
    SELECT r.*,
           (SELECT COUNT(*) FROM REVIEW_LIKE WHERE REVIEW_NO = r.REVIEW_NO) AS REVIEW_LIKE_COUNT,
           (SELECT COUNT(*) FROM REVIEW_LIKE WHERE REVIEW_NO = r.REVIEW_NO AND USER_NO = #{userNo}) AS REVIEW_LIKE
    FROM REVIEW r
    WHERE PRODUCT_NO = #{productNo} 
      AND REVIEW_COMMENT_REF IS NULL
    ORDER BY REVIEW_LIKE_COUNT DESC
  </select>

  <!-- 리뷰 리스트 (최신순 정렬) -->
  <select id="selectReviewListNewest" resultType="review">
    SELECT r.*,
           (SELECT COUNT(*) FROM REVIEW_LIKE WHERE REVIEW_NO = r.REVIEW_NO) AS REVIEW_LIKE_COUNT,
           (SELECT COUNT(*) FROM REVIEW_LIKE WHERE REVIEW_NO = r.REVIEW_NO AND USER_NO = #{userNo}) AS REVIEW_LIKE
    FROM REVIEW r
    WHERE PRODUCT_NO = #{productNo} 
      AND REVIEW_COMMENT_REF IS NULL
    ORDER BY r.REVIEW_DATE DESC
  </select>
  
  <!-- 리뷰 등록 -->
  <insert id="insertReview">
  	insert into review values(review_seq.nextval, #{productNo}, #{reviewWriter}, #{reviewScore}, #{reviewContent}, sysdate, null)
  </insert>
  
  <!-- 리뷰 답글 등록 -->
  <insert id="insertReviewComment">
  	insert into review values(review_seq.nextval, #{productNo}, #{reviewWriter}, #{reviewScore}, #{reviewContent}, sysdate, #{reviewCommentRef})
  </insert>
  
  <!-- 리뷰 수정 -->
  <update id="updateReview">
  	update review set review_content=#{reviewContent} where review_no=#{reviewNo}
  </update>
  
  <!-- 리뷰 삭제 -->
  <delete id="deleteReview">
  	delete from review where review_no=#{reviewNo}
  </delete>
  
  <!-- 리뷰 좋아요 추가 -->
  <insert id="insertReviewLike">
  	insert into review_like values(#{reviewNo}, #{userNo})
  </insert>
  
  <!-- 리뷰 좋아요 취소 -->
  <delete id="deleteReviewLike">
  	delete from review_like where review_no=#{reviewNo} and user_no=#{userNo}
  </delete>
  
  <!-- 리뷰 좋아요 수 -->
  <select id="selectReviewLikeCount" resultType="int">
  	select count(*) from review_like where review_no=#{reviewNo}
  </select>
  
  <!-- 상품 찜 -->
  <insert id="insertWishLike">
   insert into wish values (#{productNo}, #{userNo})
  </insert>
  
  <!-- 상품 찜 취소 -->
  <delete id="deleteWishLike">
  	delete from wish where product_no=#{productNo} and user_no=#{userNo}
  </delete>
  
  <!-- 상품 찜 수 -->
  <select id="selectProductLikeCount">
  	select count(*) from wish where product_no=#{productNo}
  </select>
  
  <!-- 오건하 작성 2024-10-04 -->
  <select id="myReviewTotalCount" resultType="int">
  	select count(*) from review join user_tbl on(review_writer = user_email) where user_nick = #{userNick}
  </select>
  
  <!-- 오건하 작성 2024-10-04 -->
  <select id="myReviewList" resultType="review">
  	select 
  	product_no, review_writer, review_score,product_name,review_content, review_date 
  	from review join user_tbl on(review_writer = user_email) join product using(product_no) 
  	where user_nick = #{userNick}
  </select>
  
  <!-- 오건하 작성 2024-10-04 -->
  <select id="myProductTotalCount" resultType="int">
  	select count(*) from product join user_tbl on(product_writer = user_email) where user_nick = #{userNick}
  </select>
  
    <!-- 오건하 작성 2024-10-04 -->
  <select id="myProductList" resultType="product">
  	select *
    from (
        select rownum as rnum, result.*
        from (
            select 
            	p.product_no,
                p.product_name, 
                p.product_thumb, 
                p.product_price
            from product p
            join user_tbl u on p.product_writer = u.user_email
            where u.user_nick = #{userNick}
            order by p.product_name
        ) result
        where rownum &lt;= #{end}
    )
    where rnum &gt;= #{start}
  </select>
  <!-- 오건하 작성 2024-10-07 -->
  <select id = "myWishTotalCount" resultType="int">
  	select count(*) from wish join user_tbl using(user_no) where user_nick = #{userNick}
  </select>
  <select id = "myWishList" resultType="product">
	select *
	from (
	    select rownum as rnum, result.*
	    from (
	        select 
	            p.product_no,
	            p.product_name,
	            p.product_thumb,
	            p.product_price
	        from user_tbl u
	        join wish w on u.user_no = w.user_no
	        join product p on w.product_no = p.product_no
	        where u.user_nick = #{userNick}
	        order by p.product_name
	    ) result
	    where rownum &lt;= #{end}
	)
	where rnum &gt;= #{start}
  </select>
</mapper>